/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package deliveryoversightsystem.warehouseMgr;

import com.toedter.calendar.DateUtil;
import com.toedter.calendar.JCalendar;
import com.toedter.calendar.JDateChooser;
import connection.AccessLayer;
import deliveryoversightsystem.warehouseMgr.warehouseManagerHome;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import model.addInvoiceModel;
import model.addInvoiceNoToBridgeModel;
import model.updatesModel;
import model.viewUpdatesWMModel;
import view.OptionPane;

/**
 *
 * @author Aimee
 */
public class ViewUpdatesForWM extends javax.swing.JFrame {

    private static ViewUpdatesForWM instance;
    
    public static void setInstance(ViewUpdatesForWM aInstance) {
      instance = aInstance;
    }
    
    /**
     * Creates new form ViewUpdates
     */
    public ViewUpdatesForWM() {
        initComponents();
        instance = this;
        setLocationRelativeTo(null);
        setVisible(true);
        setResizable(false);
    }
    
    public static ViewUpdatesForWM getInstance(){
        if(instance == null)
            instance = new ViewUpdatesForWM();
        return instance;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewUpdatesTable = new javax.swing.JTable();
        dosLabel = new javax.swing.JLabel();
        searchFieldForWM = new javax.swing.JTextField();
        goBtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        invoiceLabel = new javax.swing.JLabel();
        invoiceField = new javax.swing.JTextField();
        invoiceDateLabel = new javax.swing.JLabel();
        dateDeliveredLabel = new javax.swing.JLabel();
        manualDateLabel = new javax.swing.JLabel();
        electronicLabel = new javax.swing.JLabel();
        referenceLabel = new javax.swing.JLabel();
        referenceField = new javax.swing.JTextField();
        dateForwardedLabel = new javax.swing.JLabel();
        acceptItemLabel = new javax.swing.JLabel();
        enterBtn = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        refreshBtn = new javax.swing.JButton();
        viewInvoiceCB = new javax.swing.JComboBox();
        homeBtn = new javax.swing.JButton();
        dateDeliveredField = new com.toedter.calendar.JDateChooser();
        electronicField = new com.toedter.calendar.JDateChooser();
        dateForwardedField = new com.toedter.calendar.JDateChooser();
        inDateField = new com.toedter.calendar.JDateChooser();
        manualField = new com.toedter.calendar.JDateChooser();
        resetBtn = new javax.swing.JButton();
        closeItemBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
		
		addWindowListener(new java.awt.event.WindowAdapter(){
			public void windowClosing(java.awt.event.WindowEvent evt){
				formWindowClosing(evt);
			}
		});

        jPanel1.setBackground(new java.awt.Color(0, 153, 204));

        viewUpdatesTable.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        viewUpdatesTable.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        viewUpdatesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Purchase Order No.", "Purchaser", "Supplier Name", "Data Faxed ", "Invoice No.", "Invoice Date", "Date Delivered", "Manual RR Date", "Electronic RR Date", "Reference RR No.", "Date Forwarded"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewUpdatesTable.setGridColor(new java.awt.Color(153, 153, 153));
        viewUpdatesTable.setSelectionBackground(new java.awt.Color(0, 51, 102));
        viewUpdatesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewUpdatesTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(viewUpdatesTable);

        dosLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        dosLabel.setForeground(new java.awt.Color(255, 255, 255));
        dosLabel.setText("Delivery Oversight System");

        searchFieldForWM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldForWMActionPerformed(evt);
            }
        });

        goBtn.setBackground(new java.awt.Color(255, 255, 255));
        goBtn.setForeground(new java.awt.Color(0, 153, 255));
        goBtn.setText("GO");
        goBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBtnActionPerformed(evt);
            }
        });

        invoiceLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        invoiceLabel.setForeground(new java.awt.Color(255, 255, 255));
        invoiceLabel.setText("Invoice No.");

        invoiceDateLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        invoiceDateLabel.setForeground(new java.awt.Color(255, 255, 255));
        invoiceDateLabel.setText("Invoice Date");

        dateDeliveredLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        dateDeliveredLabel.setForeground(new java.awt.Color(255, 255, 255));
        dateDeliveredLabel.setText("Date Delivered");

        manualDateLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        manualDateLabel.setForeground(new java.awt.Color(255, 255, 255));
        manualDateLabel.setText("Manual RR Date");

        electronicLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        electronicLabel.setForeground(new java.awt.Color(255, 255, 255));
        electronicLabel.setText("Electronic RR Date");

        referenceLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        referenceLabel.setForeground(new java.awt.Color(255, 255, 255));
        referenceLabel.setText("Reference RR No.");

        dateForwardedLabel.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        dateForwardedLabel.setForeground(new java.awt.Color(255, 255, 255));
        dateForwardedLabel.setText("Date Forwarded");

        acceptItemLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        acceptItemLabel.setForeground(new java.awt.Color(255, 255, 255));
        acceptItemLabel.setText("Accept Item Delivery");

        enterBtn.setBackground(new java.awt.Color(255, 255, 255));
        enterBtn.setForeground(new java.awt.Color(0, 153, 255));
        enterBtn.setText("ENTER");
        enterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enterBtnActionPerformed(evt);
            }
        });

        refreshBtn.setBackground(new java.awt.Color(255, 255, 255));
        refreshBtn.setForeground(new java.awt.Color(0, 153, 255));
        refreshBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/refreshBtn.png"))); // NOI18N
        refreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshBtnjButton1ActionPerformed(evt);
            }
        });

        viewInvoiceCB.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Purchase Order No.", "Invoice No." }));
        viewInvoiceCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewInvoiceCBActionPerformed(evt);
            }
        });

        homeBtn.setBackground(new java.awt.Color(255, 255, 255));
        homeBtn.setForeground(new java.awt.Color(0, 153, 255));
        homeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/home_25.png"))); // NOI18N
        homeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeBtnActionPerformed(evt);
            }
        });

        dateDeliveredField.setOpaque(false);

        electronicField.setOpaque(false);

        dateForwardedField.setOpaque(false);

        inDateField.setOpaque(false);

        manualField.setOpaque(false);

        resetBtn.setBackground(new java.awt.Color(255, 255, 255));
        resetBtn.setForeground(new java.awt.Color(255, 0, 102));
        resetBtn.setText("RESET");
        resetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetBtnActionPerformed(evt);
            }
        });

        closeItemBtn.setBackground(new java.awt.Color(255, 255, 255));
        closeItemBtn.setForeground(new java.awt.Color(0, 153, 51));
        closeItemBtn.setText("CLOSE ITEM");
        closeItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeItemBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(dateDeliveredLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(dateDeliveredField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(invoiceLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(invoiceField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(dateForwardedLabel)
                                        .addGap(203, 203, 203)))
                                .addGap(89, 89, 89))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(electronicLabel)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(dateForwardedField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(electronicField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(88, 88, 88)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(manualDateLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(manualField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(referenceLabel)
                                    .addComponent(invoiceDateLabel))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(referenceField, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(inDateField, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(closeItemBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(resetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(enterBtn)))
                        .addContainerGap(175, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(84, 84, 84)
                                .addComponent(acceptItemLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(dosLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 182, Short.MAX_VALUE)
                                .addComponent(homeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(viewInvoiceCB, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchFieldForWM, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(goBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(refreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jSeparator1)
                            .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(25, 25, 25))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dosLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(searchFieldForWM, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(viewInvoiceCB, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(goBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(refreshBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(homeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(acceptItemLabel)
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(invoiceLabel)
                                        .addComponent(invoiceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(invoiceDateLabel))
                                    .addComponent(inDateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(dateDeliveredLabel)
                                        .addComponent(manualDateLabel))
                                    .addComponent(dateDeliveredField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(manualField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(17, 17, 17)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(electronicLabel)
                                    .addComponent(referenceLabel)
                                    .addComponent(referenceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(electronicField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dateForwardedLabel)
                            .addComponent(enterBtn)
                            .addComponent(resetBtn)
                            .addComponent(closeItemBtn)))
                    .addComponent(dateForwardedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshBtnjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshBtnjButton1ActionPerformed
        // TODO add your handling code here:
        updateViewUpdatesTable(updatesModel.getAllUpdates());
        System.gc();
    }//GEN-LAST:event_refreshBtnjButton1ActionPerformed

    private warehouseManagerHome WM;
    private void homeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeBtnActionPerformed
        // TODO add your handling code here:
        WM = new warehouseManagerHome();
        WM.setVisible(true);
    }//GEN-LAST:event_homeBtnActionPerformed

    private void enterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enterBtnActionPerformed
        // TODO add your handling code here:
        
        String purchaseNo = id;
        String delStatus = "";
        
        ResultSet rs = AccessLayer.getInstance().getDeliveryStatus(id);
        
        try{
            rs.next();
            
            delStatus = rs.getString(1);
            
            if((delStatus.equalsIgnoreCase("new")) || (delStatus.equalsIgnoreCase("waiting"))){
            
                String invoiceNo = getInvoiceField().getText().trim();
                String referenceRRNo = getReferenceField().getText().trim();
                String invoiceDate, dateDelivered, manualDate, electronicDate, dateForwarded = "";


                Date inDate = getInDateField().getDate();
                Date dateDel = getDateDeliveredField().getDate();
                Date manDate = getManualField().getDate();
                Date elecDate = getElectronicField().getDate();
                Date dateForward = getDateForwardedField().getDate();
                Date cDate = new Date();


                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                try{

                    invoiceDate = dateFormat.format(inDate);
                    dateDelivered = dateFormat.format(dateDel);
                    manualDate = dateFormat.format(manDate);
                    electronicDate = dateFormat.format(elecDate);
                    dateForwarded = dateFormat.format(dateForward);


                }catch(Exception e){
                    OptionPane.error("Invalid. Date Faxed is required.");
                    return;
                }
                
                if(cDate.before(inDate)){
                    OptionPane.error("Invoice date is not valid.");
                    return;
                }

                if(cDate.before(dateDel)){
                    OptionPane.error("Date delivered is not valid.");
                    return;
                } 

                if(cDate.before(manDate)){
                    OptionPane.error("Manual RR date is not valid.");
                    return;
                }

                if(cDate.before(elecDate)){
                    OptionPane.error("Electronic RR date is not valid.");
                    return;
                }

                if(cDate.before(dateForward)){
                    OptionPane.error("Date Forwarded is not valid.");
                    return;
                }   
                
                //JOptionPane.showMessageDialog(null, purchaseNo);
                //JOptionPane.showMessageDialog(null, invoiceNo);


                int dialogResult = JOptionPane.showConfirmDialog (null, "Would You Like to Add and Accept the Items into the Delivery List?","Confirmation",0);
                if(dialogResult == JOptionPane.YES_OPTION){

                    //if(new addInvoiceNoToBridgeModel(purchaseNo, invoiceNo).addBridgeToDB(true)){
                    
                        if(new addInvoiceModel(invoiceNo, purchaseNo, invoiceDate, dateDelivered, manualDate, 
                                electronicDate, referenceRRNo, dateForwarded).addInvoiceToDB(true)){}
                        
                            if(delStatus.equalsIgnoreCase("new")){
                                AccessLayer.getInstance().updateDeliveryStatusToWaiting(purchaseNo,"waiting");
                            }else if(delStatus.equalsIgnoreCase("waiting")){
                                //If waiting, it will always be waiting unless the WM has set the item CLOSED
                            }
                                //clearCreateUserFields();   
                                    updateViewUpdatesTable(updatesModel.getAllUpdates());
                                        System.gc();
                                            //JOptionPane.showMessageDialog(null,"Successfully Added the Item!");



                }else{
                    JOptionPane.showMessageDialog(null,"Cancelled!");
                }
                
            }
            
            else if(delStatus.equalsIgnoreCase("delivered")){
                //closeItemBtn.setEnabled(false); //this is another option
                JOptionPane.showMessageDialog(null,"This delivery has been closed!");
            }
            
        }catch (SQLException ex) {}
        
    }//GEN-LAST:event_enterBtnActionPerformed

    private void searchFieldForWMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldForWMActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldForWMActionPerformed

    private void viewInvoiceCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewInvoiceCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_viewInvoiceCBActionPerformed

    public String id;
    private void viewUpdatesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewUpdatesTableMouseClicked
        // TODO add your handling code here:
        int i = evt.getY()/getViewUpdatesTable().getRowHeight();
        if(evt.getClickCount() == 2 && i < getViewUpdatesTable().getRowCount()){
            //setUpdateEmployeeOK(true);
            //setUpdateEmployeePanelValues(getViewUpdatesTable(i));
            id = getInvoicePH(i);
            System.gc();
        }
    }//GEN-LAST:event_viewUpdatesTableMouseClicked

    private void goBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBtnActionPerformed
        // TODO add your handling code here:
        
        String retVal = "";
        String condition = getViewInvoiceCB().getSelectedItem().toString(); //currently here
        
        if(condition.equalsIgnoreCase("Purchase Order No.")){
            retVal = "purchaseOrderNo";
        }else if(condition.equalsIgnoreCase("Invoice No.")){
            retVal = "invoiceNo";
        }  
        
        String searchVal = getSearchFieldForWM().getText().trim();
        
        updateViewUpdatesTable(updatesModel.getInvoiceWithSearch(retVal,searchVal));
    }//GEN-LAST:event_goBtnActionPerformed

    private void resetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetBtnActionPerformed
        // TODO add your handling code here:

        int choice = OptionPane.confirmationDialog("Are you sure you want to reset?");
        if(choice == JOptionPane.YES_OPTION){
            clearFields();
        }
    }//GEN-LAST:event_resetBtnActionPerformed

    private void closeItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeItemBtnActionPerformed
        // TODO add your handling code here:
        //change delivery item's status to DELIVERED
        
        String purchaseNo = id;
        String delStatus = "";
        
        ResultSet rs = AccessLayer.getInstance().getDeliveryStatus(purchaseNo);
        
        try{
            rs.next();
            delStatus = rs.getString(1);
        }catch (SQLException ex) {}
        


        if((delStatus.equalsIgnoreCase("waiting"))){ 
            
            int dialogResult = JOptionPane.showConfirmDialog (null, "Would You Like to Close this Delivery?","Confirmation",0);
            if(dialogResult == JOptionPane.YES_OPTION){
                AccessLayer.getInstance().changeStatusToDelivered(purchaseNo);
                JOptionPane.showMessageDialog(null,"Purchase Order#"+purchaseNo+" has been closed successfully!");
            }else{
                JOptionPane.showMessageDialog(null,"Cancelled!");
            }
            
        }else if(delStatus.equalsIgnoreCase("delivered")){
            JOptionPane.showMessageDialog(null,"This item has already been closed!");
        }
         
        
        
    }//GEN-LAST:event_closeItemBtnActionPerformed

    private void clearFields(){
        getInvoiceField().setText("");
        getInDateField().setDate(null);
        getDateDeliveredField().setDate(null);
        getManualField().setDate(null);
        getElectronicField().setDate(null);
        getReferenceField().setText("");
        getDateForwardedField().setDate(null);
    }
  
     /**
     * get the updates from the table at row i
     * @param i row
     * @return a String from row i
     */
    private String getInvoicePH(int i){
        String phNo = getViewUpdatesTable().getValueAt(i, 0).toString();
        return phNo;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewUpdatesForWM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewUpdatesForWM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewUpdatesForWM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewUpdatesForWM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewUpdatesForWM().setVisible(true);
            }
        });
    }
    
    private void showExitDialog(){
            warehouseManagerHome.instance.setEnabled(true);
            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    }
    
    private void formWindowClosing(java.awt.event.WindowEvent evt){
        showExitDialog();
    }
    
    /** Getters and Setters**/
    public JDateChooser getDateDeliveredField() {
        return dateDeliveredField;
    }

    public void setDateDeliveredField(JDateChooser dateDeliveredField) {
        this.dateDeliveredField = dateDeliveredField;
    }

    public JDateChooser getElectronicField() {
        return electronicField;
    }

    public void setElectronicField(JDateChooser electronicField) {
        this.electronicField = electronicField;
    }

    public JDateChooser getInDateField() {
        return inDateField;
    }

    public void setInDateField(JDateChooser inDateField) {
        this.inDateField = inDateField;
    }

    public JDateChooser getManualField() {
        return manualField;
    }

    public void setManualField(JDateChooser manualField) {
        this.manualField = manualField;
    }

    public JTextField getInvoiceField() {
        return invoiceField;
    }

    public void setInvoiceField(JTextField invoiceField) {
        this.invoiceField = invoiceField;
    }

    public JTextField getReferenceField() {
        return referenceField;
    }

    public void setReferenceField(JTextField referenceField) {
        this.referenceField = referenceField;
    }

    public JTextField getSearchField() {
        return searchFieldForWM;
    }

    public void setSearchField(JTextField searchField) {
        this.searchFieldForWM = searchField;
    }

    public JTable getViewUpdatesTable() {
        return viewUpdatesTable;
    }

    public void setViewUpdatesTable(JTable viewUpdatesTable) {
        this.viewUpdatesTable = viewUpdatesTable;
    }

    public JDateChooser getDateForwardedField() {
        return dateForwardedField;
    }

    public void setDateForwardedField(JDateChooser dateForwardedField) {
        this.dateForwardedField = dateForwardedField;
    }

    public JTextField getSearchFieldForWM() {
        return searchFieldForWM;
    }

    public void setSearchFieldForWM(JTextField searchFieldForWM) {
        this.searchFieldForWM = searchFieldForWM;
    }

    public JComboBox getViewInvoiceCB() {
        return viewInvoiceCB;
    }

    public void setViewInvoiceCB(JComboBox viewInvoiceCB) {
        this.viewInvoiceCB = viewInvoiceCB;
    }
    
  
    
    /**
     * 
     * @param invoiceList 
     */
    public void updateViewUpdatesTable(ArrayList<updatesModel> invoiceList){
        
        //JOptionPane.showMessageDialog(null,"Getting table results...");
        if(invoiceList == null)
            return;
        DefaultTableModel model = (DefaultTableModel) getViewUpdatesTable().getModel();
        int size = invoiceList.size(), modelRows = model.getRowCount();
        if(size > modelRows){
            for(int i = size-modelRows; i > 0; i--)
                model.addRow(new String[model.getColumnCount()]);
        }
        else if(modelRows > size){
            for(int i = modelRows-size; i > 0; i--)
                model.removeRow(0);
        }
        for(int i = 0; i < invoiceList.size(); i++){
            updatesModel m = invoiceList.get(i);
            
            model.setValueAt(m.getPurchaseNo(),i,0);
            model.setValueAt(m.getPurchaserName(),i,1);
            model.setValueAt(m.getSuppName(),i,2);
            model.setValueAt(m.getFaxedDate(),i,3);
            
            model.setValueAt(m.getInvoiceNo(),i,4);
            model.setValueAt(m.getInvoiceDate(),i,5);
            model.setValueAt(m.getDateDelivered(),i,6);
            model.setValueAt(m.getManualDate(),i,7);
            model.setValueAt(m.getElectronicDate(),i,8);
            model.setValueAt(m.getReferenceRRNo(),i,9);
            model.setValueAt(m.getDateForwarded(),i,10);
            
//            String pos = m.getPosition().trim();
//            // condition to display String Position not abbrev.
//            if(pos.equals("WM")){
//                pos = "Warehouse Manager";
//            }else if(pos.equals("PH")){
//                pos = "Purchasing Head";
//            }else if(pos.equals("SA")){
//                pos = "System Administrator";
//            }
//            model.setValueAt(pos,i,4);
//            model.setValueAt(m.getStatus(),i,5);
            
            //model.setValueAt(m.getPhilcareYear(),i,6); - account created date
            //model.setValueAt(m.getMonth1(),i,7); - change password button
            //model.setValueAt(m.getMonth2(),i,8); - deactivate button
            
            //ButtonColumn btnCol = new ButtonColumn(viewUsersTable, Change, 7);
           
        }
        System.gc();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel acceptItemLabel;
    private javax.swing.JButton closeItemBtn;
    private com.toedter.calendar.JDateChooser dateDeliveredField;
    private javax.swing.JLabel dateDeliveredLabel;
    private com.toedter.calendar.JDateChooser dateForwardedField;
    private javax.swing.JLabel dateForwardedLabel;
    private javax.swing.JLabel dosLabel;
    private com.toedter.calendar.JDateChooser electronicField;
    private javax.swing.JLabel electronicLabel;
    private javax.swing.JButton enterBtn;
    private javax.swing.JButton goBtn;
    private javax.swing.JButton homeBtn;
    private com.toedter.calendar.JDateChooser inDateField;
    private javax.swing.JLabel invoiceDateLabel;
    private javax.swing.JTextField invoiceField;
    private javax.swing.JLabel invoiceLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel manualDateLabel;
    private com.toedter.calendar.JDateChooser manualField;
    private javax.swing.JTextField referenceField;
    private javax.swing.JLabel referenceLabel;
    private javax.swing.JButton refreshBtn;
    private javax.swing.JButton resetBtn;
    private javax.swing.JTextField searchFieldForWM;
    private javax.swing.JComboBox viewInvoiceCB;
    private javax.swing.JTable viewUpdatesTable;
    // End of variables declaration//GEN-END:variables
}
